/*
 * DSS - Digital Signature Services
 *
 * Copyright (C) 2011 European Commission, Directorate-General Internal Market and Services (DG MARKT), B-1049 Bruxelles/Brussel
 *
 * Developed by: 2011 ARHS Developments S.A. (rue Nicolas Bov√© 2B, L-1253 Luxembourg) http://www.arhs-developments.com
 *
 * This file is part of the "DSS - Digital Signature Services" project.
 *
 * "DSS - Digital Signature Services" is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * DSS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * "DSS - Digital Signature Services".  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.europa.ec.markt.tlmanager.view.certificate;

import java.security.cert.X509Certificate;
import java.util.Iterator;
import java.util.List;
import java.util.ResourceBundle;

import javax.security.auth.x500.X500Principal;
import javax.swing.*;

import eu.europa.ec.markt.dss.DSSUtils;
import eu.europa.ec.markt.tlmanager.core.Configuration;
import eu.europa.ec.markt.tlmanager.view.multivalue.ContentWatcher;
import eu.europa.ec.markt.tlmanager.view.multivalue.MandatoryLabelHandler;
import eu.europa.ec.markt.tlmanager.view.multivalue.MultiMode;
import eu.europa.ec.markt.tlmanager.view.multivalue.content.ServiceDigitalIdentityMultivalueAdapter;
import eu.europa.ec.markt.tsl.jaxb.tsl.DigitalIdentityType;

/**
 * Opens a <code>ServiceDigitalIdentityPanel</code> and displays short information about a certificate.
 * 
 *
 * @version $Revision: 1168 $ - $Date: 2012-03-05 12:28:27 +0100 (Mon, 05 Mar 2012) $
 */
public class ServiceDigitalIdentityPanel extends javax.swing.JPanel implements ContentWatcher {
    private static final ResourceBundle uiKeys = ResourceBundle.getBundle(
            "eu/europa/ec/markt/tlmanager/uiKeysComponents", Configuration.getInstance().getLocale());

    private MandatoryLabelHandler labelHandler;

    /**
     * The default constructor for ServiceDigitalIdentityPanel.
     */
    public ServiceDigitalIdentityPanel() {
        initComponents();
    }
    
    /**
     * Another constructor for ServiceDigitalIdentityPanel.
     */
    public ServiceDigitalIdentityPanel(JFileChooser fileChooser) {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        distinguishedName = new javax.swing.JTextField();
        certificateButton = new eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton(MultiMode.MULTI_CERT, null, null);
        certificateButton.getMultivaluePanel().addContentWatcher(this);
        digitalIdLabel = new javax.swing.JLabel();
        boxSN = new javax.swing.JCheckBox();
        boxSKI = new javax.swing.JCheckBox();
        boxCert = new javax.swing.JCheckBox();

        distinguishedName.setEnabled(false);
        distinguishedName.setName("distinguishedName"); // NOI18N

        certificateButton.setName("certificateButton"); // NOI18N

        digitalIdLabel.setText(uiKeys.getString("Certificate.label.useForTL")); // NOI18N

        boxSN.setSelected(true);
        boxSN.setText(uiKeys.getString("Certificate.label.subjectName")); // NOI18N
        boxSN.setName("boxSN"); // NOI18N
        boxSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxSNActionPerformed(evt);
            }
        });

        boxSKI.setSelected(true);
        boxSKI.setText(uiKeys.getString("Certificate.label.ski")); // NOI18N
        boxSKI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxSKIActionPerformed(evt);
            }
        });

        boxCert.setSelected(true);
        boxCert.setText(uiKeys.getString("Certificate.label.certificate")); // NOI18N
        boxCert.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(distinguishedName, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(digitalIdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxCert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxSN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxSKI)
                .addContainerGap(198, Short.MAX_VALUE))
            .addComponent(certificateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(distinguishedName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(certificateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(digitalIdLabel)
                    .addComponent(boxCert)
                    .addComponent(boxSN)
                    .addComponent(boxSKI))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void boxSKIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxSKIActionPerformed
        alignSnSki();
    }//GEN-LAST:event_boxSKIActionPerformed

    private void boxSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxSNActionPerformed
        alignSnSki();
    }//GEN-LAST:event_boxSNActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boxCert;
    private javax.swing.JCheckBox boxSKI;
    private javax.swing.JCheckBox boxSN;
    public eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton certificateButton;
    private javax.swing.JLabel digitalIdLabel;
    private javax.swing.JTextField distinguishedName;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the <code>MandatoryLabelHandler</code>
     * 
     * @param labelHandler the handler
     */
    public void setLabelHandler(MandatoryLabelHandler labelHandler) {
        this.labelHandler = labelHandler;
    }

    /** {@inheritDoc} */
    @Override
    public void contentHasChanged(boolean empty, String text) {
        if (labelHandler != null) {
            labelHandler.handleLabelStateFor(this, empty);
        }

        // check or unceheck sn / ski checkboxes
        final ServiceDigitalIdentityMultivalueAdapter serviceDigitalIdentityMultivalueAdapter = (ServiceDigitalIdentityMultivalueAdapter) certificateButton
              .getMultivaluePanel().getMultivalueModel();
        final List<DigitalIdentityType> digitalId = serviceDigitalIdentityMultivalueAdapter.getDigitalIdentityList()
              .getDigitalId();

        boolean hasSn = false;
        boolean hasSki = false;

        for (Iterator<DigitalIdentityType> iterator = digitalId.iterator(); iterator.hasNext(); ) {
            DigitalIdentityType digitalIdentityType = iterator.next();
            if (digitalIdentityType.getX509SubjectName() != null) {
                hasSn = true;
            }
            if (digitalIdentityType.getX509SKI() != null) {
                hasSki = true;
            }
        }

        boxSN.setSelected(hasSn);
        boxSKI.setSelected(hasSki);


        alignSnSki();

    }

    private void alignSnSki() {
        final ServiceDigitalIdentityMultivalueAdapter serviceDigitalIdentityMultivalueAdapter = (ServiceDigitalIdentityMultivalueAdapter) certificateButton
              .getMultivaluePanel().getMultivalueModel();
        final List<DigitalIdentityType> digitalId = serviceDigitalIdentityMultivalueAdapter.getDigitalIdentityList()
              .getDigitalId();

        boolean useSn = boxSN.isSelected();
        boolean useSki = boxSKI.isSelected();
        serviceDigitalIdentityMultivalueAdapter.setSn(useSn);
        serviceDigitalIdentityMultivalueAdapter.setSki(useSki);

        boolean snAdded = false;
        boolean skiAdded = false;

        // cleanup existing SN & SKI (might not be aligned with the certificates chosen
        for (Iterator<DigitalIdentityType> iterator = digitalId.iterator(); iterator.hasNext(); ) {
            DigitalIdentityType digitalIdentityType = iterator.next();
            if (digitalIdentityType.getX509SubjectName() != null) {
                iterator.remove();
            }
            if (digitalIdentityType.getX509SKI() != null) {
                iterator.remove();
            }
        }

        // cleanup SubjetName display
        distinguishedName.setText("");
        distinguishedName.setCaretPosition(0);

        // search new values
        for (final String key : serviceDigitalIdentityMultivalueAdapter.getKeys()) {
            final DigitalIdentityModel digitalIdentityModel = serviceDigitalIdentityMultivalueAdapter.getValue(key);
            if (digitalIdentityModel != null) {
                final X509Certificate certificate = digitalIdentityModel.getCertificate();
                if (certificate != null) {

                    final DigitalIdentityType digitalIdentitySN = new DigitalIdentityType();
                    final String x509SubjectName = certificate.getSubjectX500Principal()
                          .getName(X500Principal.RFC2253);
                    digitalIdentitySN.setX509SubjectName(x509SubjectName);

                    // updateUI too
                    // TODO: might be interesting to display all different subjectName (with error message) if use has chosen different certificitates
                    distinguishedName.setText(x509SubjectName);
                    distinguishedName.setCaretPosition(0);

                    if (!snAdded && useSn) {
                        digitalId.add(digitalIdentitySN);
                        snAdded = true;
                    }
                    if (!skiAdded && useSki) {
                        final byte[] skiValue = DSSUtils.getSki(certificate);
                        if (skiValue != null && skiValue.length > 0) {
                            final DigitalIdentityType digitalIdentitySKI = new DigitalIdentityType();
                            digitalIdentitySKI.setX509SKI(skiValue);
                            digitalId.add(digitalIdentitySKI);
                            skiAdded = true;
                        }
                    }
                }
            }
        }
    }

    public ServiceDigitalIdentityMultivalueAdapter getServiceDigitalIdentityMultivalueAdapter() {
        final ServiceDigitalIdentityMultivalueAdapter multivalueModel = (ServiceDigitalIdentityMultivalueAdapter) certificateButton
              .getMultivaluePanel().getMultivalueModel();
        return multivalueModel;
    }

    public void setServiceDigitalIdentityMultivalueAdapter(ServiceDigitalIdentityMultivalueAdapter serviceDigitalIdentityMultivalueAdapter) {
        certificateButton.getMultivaluePanel().setMultivalueModel(serviceDigitalIdentityMultivalueAdapter);
        certificateButton.refreshContentInformation();
        refreshContentInformation();

    }

    public void refreshContentInformation() {
        final ServiceDigitalIdentityMultivalueAdapter multivalueModel = (ServiceDigitalIdentityMultivalueAdapter) certificateButton
              .getMultivaluePanel().getMultivalueModel();
        contentHasChanged(multivalueModel.isEmpty(), "");
    }

    public boolean isBoxSnSelected() {
        return boxSN.isSelected();
    }

    public boolean isBoxSkiSelected() {
        return boxSKI.isSelected();
    }
}