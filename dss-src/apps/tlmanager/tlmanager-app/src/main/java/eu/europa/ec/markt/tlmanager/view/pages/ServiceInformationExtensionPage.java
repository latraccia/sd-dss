/*
 * DSS - Digital Signature Services
 *
 * Copyright (C) 2011 European Commission, Directorate-General Internal Market and Services (DG MARKT), B-1049 Bruxelles/Brussel
 *
 * Developed by: 2011 ARHS Developments S.A. (rue Nicolas Bov√© 2B, L-1253 Luxembourg) http://www.arhs-developments.com
 *
 * This file is part of the "DSS - Digital Signature Services" project.
 *
 * "DSS - Digital Signature Services" is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * DSS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * "DSS - Digital Signature Services".  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.europa.ec.markt.tlmanager.view.pages;

import eu.europa.ec.markt.dss.common.TooltipHelper;
import eu.europa.ec.markt.tlmanager.core.Configuration;
import eu.europa.ec.markt.tlmanager.core.QNames;
import eu.europa.ec.markt.tlmanager.model.treeNodes.TSLDataNode;
import eu.europa.ec.markt.tlmanager.util.Util;
import eu.europa.ec.markt.tlmanager.view.binding.AdditionalServiceInformationConverter;
import eu.europa.ec.markt.tlmanager.view.binding.BindingManager;
import eu.europa.ec.markt.tlmanager.view.binding.InternationalNamesConverter;
import eu.europa.ec.markt.tlmanager.view.binding.NonEmptyMultiLangURIConverter;
import eu.europa.ec.markt.tlmanager.view.binding.XMLGregorianCalendarConverter;
import eu.europa.ec.markt.tlmanager.view.multivalue.MultiMode;
import eu.europa.ec.markt.tsl.jaxb.tsl.ExtensionType;
import eu.europa.ec.markt.tsl.jaxb.tsl.ExtensionsListType;
import eu.europa.ec.markt.tsl.jaxb.tslx.TakenOverByType;

import javax.swing.*;
import javax.xml.bind.JAXBElement;
import javax.xml.datatype.XMLGregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Content page for managing all below a <tsl:ServiceInformationExtensions/>.
 * 
 *
 * @version $Revision: 2840 $ - $Date: 2013-11-04 12:30:49 +0100 (lun., 04 nov. 2013) $
 */

public class ServiceInformationExtensionPage extends TreeDataPublisher {

    private static final Logger LOG = Logger.getLogger(ServiceInformationExtensionPage.class.getName());

    private DefaultComboBoxModel schemeTerritoryModel;

    /**
     * Instantiates a new service information extension page.
     */
    public ServiceInformationExtensionPage(JTree jtree) {
        super(jtree);
        String[] territoryItems = Util.addNoSelectionEntry(Configuration.getInstance().getCountryCodes().getCodes());
        schemeTerritoryModel = new DefaultComboBoxModel(territoryItems);
        initComponents();
        initBinding();
        tobTitle.setTitle(uiKeys.getString("ServiceInformationExtensionPage.tobTitle.title"));
        ecriTitle.setTitle(uiKeys.getString("ServiceInformationExtensionPage.ecriTitle.title"));
        asiTitle.setTitle(uiKeys.getString("ServiceInformationExtensionPage.asiTitle.title"));
        initBusinessRules();

        additionalSetup();

        ecrInfoLabel.setToolTipText(Configuration.getInstance().getTimeZoneName());
        TooltipHelper.registerComponentAtTooltipManager(ecrInfoLabel);
    }

    /** {@inheritDoc} */
    @Override
    public void setName() {
        setName(TreeDataPublisher.SERVICE_INFORMATION_EXTENSION_PAGE);
    }

    /** {@inheritDoc} */
    @Override
    protected void setupMandatoryLabels() {
        // nop
    }

    private void initBusinessRules() {
        criticalECRI.setSelected(false);
        criticalECRI.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tobTitle = new eu.europa.ec.markt.tlmanager.view.common.TitledPanel();
        jPanel1 = new javax.swing.JPanel();
        criticalTOB = new javax.swing.JCheckBox();
        uriLabel = new javax.swing.JLabel();
        tspName = new eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton(MultiMode.MULTILANG_TEXT, Configuration.LanguageCodes.getEnglishLanguage(), null);
        schemeOperatorName = new eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton(MultiMode.MULTILANG_TEXT, Configuration.LanguageCodes.getEnglishLanguage(), null);
        tspNameLabel = new javax.swing.JLabel();
        schemeOperatorNameLabel = new javax.swing.JLabel();
        schemeTerritoryLabel = new javax.swing.JLabel();
        schemeTerritory = new javax.swing.JComboBox();
        uri = new javax.swing.JTextField();
        ecriTitle = new eu.europa.ec.markt.tlmanager.view.common.TitledPanel();
        criticalECRI = new javax.swing.JCheckBox();
        ecrInfoLabel = new javax.swing.JLabel();
        ecrInfo = new eu.europa.ec.markt.tlmanager.view.common.DateTimePicker();
        asiTitle = new eu.europa.ec.markt.tlmanager.view.common.TitledPanel();
        additionalServiceInformation = new eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton(MultiMode.MULTI_ASI, null, null);
        additionalServiceInformationLabel = new javax.swing.JLabel();

        criticalTOB.setText(uiKeys.getString("ServiceInformationExtensionPage.criticalTOB.text")); // NOI18N

        uriLabel.setLabelFor(uri);
        uriLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.uriLabel.text")); // NOI18N

        tspNameLabel.setLabelFor(tspName);
        tspNameLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.tspNameLabel.text")); // NOI18N

        schemeOperatorNameLabel.setLabelFor(schemeOperatorName);
        schemeOperatorNameLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.schemeOperatorNameLabel.text")); // NOI18N

        schemeTerritoryLabel.setLabelFor(schemeTerritory);
        schemeTerritoryLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.schemeTerritoryLabel.text")); // NOI18N

        schemeTerritory.setEditable(!Configuration.getInstance().isEuMode());
        schemeTerritory.setModel(schemeTerritoryModel);

        uri.setName("uri"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tspNameLabel)
                            .addComponent(schemeOperatorNameLabel)
                            .addComponent(uriLabel)
                            .addComponent(schemeTerritoryLabel))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uri, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(schemeTerritory, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(schemeOperatorName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tspName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(criticalTOB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(criticalTOB)
                        .addGap(16, 16, 16)
                        .addComponent(uriLabel))
                    .addComponent(uri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tspNameLabel)
                    .addComponent(tspName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(schemeOperatorNameLabel)
                    .addComponent(schemeOperatorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(schemeTerritoryLabel)
                    .addComponent(schemeTerritory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tobTitleLayout = new javax.swing.GroupLayout(tobTitle);
        tobTitle.setLayout(tobTitleLayout);
        tobTitleLayout.setHorizontalGroup(
            tobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tobTitleLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(186, Short.MAX_VALUE))
        );
        tobTitleLayout.setVerticalGroup(
            tobTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        criticalECRI.setText(uiKeys.getString("ServiceInformationExtensionPage.criticalECRI.text")); // NOI18N

        ecrInfoLabel.setLabelFor(ecrInfo);
        ecrInfoLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.ecrInfoLabel.text")); // NOI18N

        ecrInfo.setName("ecrInfo"); // NOI18N

        javax.swing.GroupLayout ecriTitleLayout = new javax.swing.GroupLayout(ecriTitle);
        ecriTitle.setLayout(ecriTitleLayout);
        ecriTitleLayout.setHorizontalGroup(
            ecriTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ecriTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ecriTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(criticalECRI)
                    .addGroup(ecriTitleLayout.createSequentialGroup()
                        .addComponent(ecrInfoLabel)
                        .addGap(10, 10, 10)
                        .addComponent(ecrInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ecriTitleLayout.setVerticalGroup(
            ecriTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ecriTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ecriTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ecrInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ecriTitleLayout.createSequentialGroup()
                        .addComponent(criticalECRI)
                        .addGap(19, 19, 19)
                        .addComponent(ecrInfoLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        additionalServiceInformation.setName("additionalServiceInformation"); // NOI18N

        additionalServiceInformationLabel.setLabelFor(additionalServiceInformation);
        additionalServiceInformationLabel.setText(uiKeys.getString("ServiceInformationExtensionPage.additionalServiceInformationLabel.text")); // NOI18N

        javax.swing.GroupLayout asiTitleLayout = new javax.swing.GroupLayout(asiTitle);
        asiTitle.setLayout(asiTitleLayout);
        asiTitleLayout.setHorizontalGroup(
            asiTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(asiTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(additionalServiceInformationLabel)
                .addGap(26, 26, 26)
                .addComponent(additionalServiceInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(217, Short.MAX_VALUE))
        );
        asiTitleLayout.setVerticalGroup(
            asiTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(asiTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(asiTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(additionalServiceInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(additionalServiceInformationLabel))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ecriTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tobTitle, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(asiTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ecriTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(asiTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton additionalServiceInformation;
    private javax.swing.JLabel additionalServiceInformationLabel;
    private eu.europa.ec.markt.tlmanager.view.common.TitledPanel asiTitle;
    private javax.swing.JCheckBox criticalECRI;
    private javax.swing.JCheckBox criticalTOB;
    private eu.europa.ec.markt.tlmanager.view.common.DateTimePicker ecrInfo;
    private javax.swing.JLabel ecrInfoLabel;
    private eu.europa.ec.markt.tlmanager.view.common.TitledPanel ecriTitle;
    private javax.swing.JPanel jPanel1;
    private eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton schemeOperatorName;
    private javax.swing.JLabel schemeOperatorNameLabel;
    private javax.swing.JComboBox schemeTerritory;
    private javax.swing.JLabel schemeTerritoryLabel;
    private eu.europa.ec.markt.tlmanager.view.common.TitledPanel tobTitle;
    private eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton tspName;
    private javax.swing.JLabel tspNameLabel;
    private javax.swing.JTextField uri;
    private javax.swing.JLabel uriLabel;
    // End of variables declaration//GEN-END:variables

    private void initBinding() {
        if (bindingManager == null) {
            bindingManager = new BindingManager(this);
        }

        // TOB
        bindingManager.createBindingForComponent(criticalTOB, "critical", QNames._TakenOverByCritical);

        bindingManager.createBindingForComponent(uri, "URI", QNames._TakenOverByUri);
        bindingManager.appendConverter(new NonEmptyMultiLangURIConverter(), QNames._TakenOverByUri);

        bindingManager
                .createBindingForComponent(tspName.getMultivaluePanel(), "TSPName", QNames._TakenOverByTSPName);
        bindingManager.appendConverter(new InternationalNamesConverter(), QNames._TakenOverByTSPName);

        bindingManager.createBindingForComponent(schemeOperatorName.getMultivaluePanel(), "schemeOperatorName",
                QNames._TakenOverBySchemeOperatorName);
        bindingManager.appendConverter(new InternationalNamesConverter(), QNames._TakenOverBySchemeOperatorName);

        bindingManager.createBindingForComponent(schemeTerritory, "schemeTerritory",
                QNames._TakenOverBySchemeTerritory);

        // ECRI
        bindingManager.createBindingForComponent(criticalECRI, "critical",
                QNames._ExpiredCertsRevocationInfoCritical);

        bindingManager.createBindingForComponent(ecrInfo, "value", QNames._ExpiredCertsRevocationInfoDate);
        bindingManager.appendConverter(new XMLGregorianCalendarConverter(), QNames._ExpiredCertsRevocationInfoDate);

        // ASI
        bindingManager.createBindingForComponent(additionalServiceInformation.getMultivaluePanel(), "extension",
                QNames._AdditionalServiceInformation_QNAME.getLocalPart());
        bindingManager.appendConverter(new AdditionalServiceInformationConverter(),
                QNames._AdditionalServiceInformation_QNAME.getLocalPart());

    }

    /** {@inheritDoc} */
    @Override
    public void updateViewFromData(TSLDataNode dataNode) {
        this.dataNode = dataNode;
        ExtensionsListType extensionsList = (ExtensionsListType) dataNode.getUserObject();

        LOG.log(Level.FINE, "Value changed {0}", extensionsList);

        ExtensionType takenOverByCriticality = null, ecrInfoCriticality = null;
        TakenOverByType takenOverBy = null;
        JAXBElement<XMLGregorianCalendar> ecrInfo = null;

        // extract the extensions which are of interest for this page
        for (ExtensionType extension : extensionsList.getExtension()) {
            List<Object> content = extension.getContent();
            for (Object obj : content) {
                if (obj instanceof JAXBElement<?>) {
                    JAXBElement<?> element = (JAXBElement<?>) obj;
                    if (element.getName().equals(QNames._TakenOverBy_QNAME)) {
                        takenOverByCriticality = extension;
                        takenOverBy = (TakenOverByType) element.getValue();
                    } else if (element.getName().equals(QNames._ExpiredCertsRevocationInfo_QNAME)) {
                        ecrInfoCriticality = extension;
                        ecrInfo = (JAXBElement<XMLGregorianCalendar>) element;
                    }
                }
            }
        }

        bindingManager.unbindAll();

        // TOB
        bindingManager.amendSourceForBinding(takenOverByCriticality, QNames._TakenOverByCritical);

        bindingManager.amendSourceForBinding(takenOverBy, QNames._TakenOverByUri);
        bindingManager.amendSourceForBinding(takenOverBy, QNames._TakenOverByTSPName);
        bindingManager.amendSourceForBinding(takenOverBy, QNames._TakenOverBySchemeOperatorName);
        bindingManager.amendSourceForBinding(takenOverBy, QNames._TakenOverBySchemeTerritory);

        // ECRI
        bindingManager.amendSourceForBinding(ecrInfoCriticality, QNames._ExpiredCertsRevocationInfoCritical);
        bindingManager.amendSourceForBinding(ecrInfo, QNames._ExpiredCertsRevocationInfoDate);

        // ASI - bind the whole list of extensions ! Note: only the matching extensionTypes will be used
        // filtering is done in AdditionalServiceInformationAdapter
        bindingManager.amendSourceForBinding(extensionsList,
                QNames._AdditionalServiceInformation_QNAME.getLocalPart());

        bindingManager.bindAll();

        // update all the preview information on the multivalue buttons
        additionalServiceInformation.refreshContentInformation();
        schemeOperatorName.refreshContentInformation();
        tspName.refreshContentInformation();
    }
}