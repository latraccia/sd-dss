/*
 * DSS - Digital Signature Services
 *
 * Copyright (C) 2011 European Commission, Directorate-General Internal Market and Services (DG MARKT), B-1049 Bruxelles/Brussel
 *
 * Developed by: 2011 ARHS Developments S.A. (rue Nicolas Bov√© 2B, L-1253 Luxembourg) http://www.arhs-developments.com
 *
 * This file is part of the "DSS - Digital Signature Services" project.
 *
 * "DSS - Digital Signature Services" is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * DSS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * "DSS - Digital Signature Services".  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.europa.ec.markt.tlmanager.view.panel;

import eu.europa.ec.markt.tlmanager.core.Configuration;

import java.util.ResourceBundle;

/**
 * A small panel for holding the values for a <tsl:ExtensionsListType>:
 * 
 *
 * @version $Revision: 1168 $ - $Date: 2012-03-05 12:28:27 +0100 (lun., 05 mars 2012) $
 */

public class TSPInformationExtensionPanel extends javax.swing.JPanel {
    private static final ResourceBundle uiKeys = ResourceBundle.getBundle(
            "eu/europa/ec/markt/tlmanager/uiKeysComponents", Configuration.getInstance().getLocale());

    private TSPInformationExtensionModel model;

    /**
     * The default constructor for TSPInformationExtensionPanel.
     */
    public TSPInformationExtensionPanel() {
        model = new TSPInformationExtensionModel();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        critical = new javax.swing.JCheckBox();
        extensionLabel = new javax.swing.JLabel();
        extension = new javax.swing.JTextField();

        critical.setText(uiKeys.getString("TSPInformationExtensionPanel.critical")); // NOI18N

        extensionLabel.setText(uiKeys.getString("TSPInformationExtensionPanel.extension")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(critical)
                                        .addGroup(
                                                layout.createSequentialGroup()
                                                        .addComponent(extensionLabel)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(extension,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, 247,
                                                                Short.MAX_VALUE))).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(critical)
                        .addGap(18, 18, 18)
                        .addGroup(
                                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(extensionLabel)
                                        .addComponent(extension, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox critical;
    private javax.swing.JTextField extension;
    private javax.swing.JLabel extensionLabel;

    // End of variables declaration//GEN-END:variables

    private void resetValuesFromModel() {
        critical.setSelected(model.isCritical());
        extension.setText(model.getExtension());
    }

    private void resetModelFromValues() {
        model.setCritical(critical.isSelected());
        model.setExtension(extension.getText());
    }

    /**
     * Empties all values in the model and resets ui components.
     */
    public void clearModel() {
        this.model.clear();
        resetValuesFromModel();
    }

    /**
     * Resets the component values to the one in the model.
     * 
     * @param model the updated model
     */
    public void updateCurrentValues(TSPInformationExtensionModel model) {
        this.model = model;
        resetValuesFromModel();
    }

    /**
     * Resets the current values in the model and returns it.
     * 
     * @return the most current model
     */
    public TSPInformationExtensionModel retrieveCurrentValues() {
        resetModelFromValues();
        return new TSPInformationExtensionModel(model);
    }
}