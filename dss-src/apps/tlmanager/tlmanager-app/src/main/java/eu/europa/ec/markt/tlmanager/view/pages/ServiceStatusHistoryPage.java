/*
 * DSS - Digital Signature Services
 *
 * Copyright (C) 2011 European Commission, Directorate-General Internal Market and Services (DG MARKT), B-1049 Bruxelles/Brussel
 *
 * Developed by: 2011 ARHS Developments S.A. (rue Nicolas Bov√© 2B, L-1253 Luxembourg) http://www.arhs-developments.com
 *
 * This file is part of the "DSS - Digital Signature Services" project.
 *
 * "DSS - Digital Signature Services" is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * DSS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * "DSS - Digital Signature Services".  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.europa.ec.markt.tlmanager.view.pages;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.*;

import eu.europa.ec.markt.dss.common.TooltipHelper;
import eu.europa.ec.markt.tlmanager.core.Configuration;
import eu.europa.ec.markt.tlmanager.core.QNames;
import eu.europa.ec.markt.tlmanager.model.treeNodes.HistoryNode;
import eu.europa.ec.markt.tlmanager.model.treeNodes.ServiceNode;
import eu.europa.ec.markt.tlmanager.model.treeNodes.TSLDataNode;
import eu.europa.ec.markt.tlmanager.util.Util;
import eu.europa.ec.markt.tlmanager.view.binding.BindingManager;
import eu.europa.ec.markt.tlmanager.view.binding.CertificatePropertyConverter;
import eu.europa.ec.markt.tlmanager.view.binding.InternationalNamesConverter;
import eu.europa.ec.markt.tlmanager.view.binding.XMLGregorianCalendarConverter;
import eu.europa.ec.markt.tlmanager.view.certificate.CertificatePropertyModel.SDIWrapper;
import eu.europa.ec.markt.tlmanager.view.multivalue.MultiMode;
import eu.europa.ec.markt.tsl.jaxb.tsl.DigitalIdentityListType;
import eu.europa.ec.markt.tsl.jaxb.tsl.ServiceHistoryInstanceType;
import eu.europa.ec.markt.tsl.jaxb.tsl.TSPServiceType;

/**
 * Content page for managing all below a <tsl:ServiceHistoryInstance/>.
 * 
 *
 * @version $Revision: 3003 $ - $Date: 2013-11-19 12:41:21 +0100 (mar., 19 nov. 2013) $
 */
public class ServiceStatusHistoryPage extends TreeDataPublisher {

    private static final Logger LOG = Logger.getLogger(ServiceStatusHistoryPage.class.getName());

    private DefaultComboBoxModel servicePreviousStatusModel;
    private DefaultComboBoxModel serviceTypeIdentifierModel;

    /**
     * Instantiates a new service status history page.
     */
    public ServiceStatusHistoryPage(JTree jtree) {
        super(jtree);

        String[] serviceIdentifier = Util.addNoSelectionEntry(Configuration.getInstance().getTL()
              .getTslServiceIdentifier());
        serviceTypeIdentifierModel = new DefaultComboBoxModel(serviceIdentifier);

        String[] serviceStatus = Util.addNoSelectionEntry(Configuration.getInstance().getTL().getTslServiceStatus());
        servicePreviousStatusModel = new DefaultComboBoxModel(serviceStatus);

        initComponents();
        historyTitle.setTitle(uiKeys.getString("ServiceStatusHistoryPage.historyTitle.title"));
        initBinding();

        additionalSetup();
        
        previousStatusStartingDateLabel.setToolTipText(Configuration.getInstance().getTimeZoneName());
        TooltipHelper.registerComponentAtTooltipManager(previousStatusStartingDateLabel);
    }

    /** {@inheritDoc} */
    @Override
    protected void setupListenersForTreeLabelComponents() {
        servicePreviousStatus.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (!bindingManager.isBindingInProgress() && e.getStateChange() == ItemEvent.SELECTED
                        && dataNode != null) {
                    dataNode.resetLabel();
                }
            }
        });
    }

    /** {@inheritDoc} */
    @Override
    public void setName() {
        setName(TreeDataPublisher.SERVICE_STATUS_HISTORY_PAGE);
    }

    /** {@inheritDoc} */
    @Override
    protected void setupMandatoryLabels() {
        setMandatoryLabel(serviceTypeIdentifierLabel);
        setMandatoryLabel(serviceNameLabel);
        setMandatoryLabel(digitalIdLabel);
        setMandatoryLabel(servicePreviousStatusLabel);
        setMandatoryLabel(previousStatusStartingDateLabel);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        historyTitle = new eu.europa.ec.markt.tlmanager.view.common.TitledPanel();
        serviceTypeIdentifierLabel = new javax.swing.JLabel();
        serviceName = new eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton(MultiMode.MULTILANG_TEXT, Configuration.LanguageCodes.getEnglishLanguage(), null);
        serviceNameLabel = new javax.swing.JLabel();
        digitalIdLabel = new javax.swing.JLabel();
        servicePreviousStatus = new javax.swing.JComboBox();
        servicePreviousStatusLabel = new javax.swing.JLabel();
        previousStatusStartingDateLabel = new javax.swing.JLabel();
        previousStatusStartingDate = new eu.europa.ec.markt.tlmanager.view.common.DateTimePicker();
        certificateProperty = new eu.europa.ec.markt.tlmanager.view.certificate.CertificateProperty();
        serviceTypeIdentifier = new javax.swing.JComboBox();

        historyTitle.setName("historyTitle"); // NOI18N

        serviceTypeIdentifierLabel.setLabelFor(serviceTypeIdentifier);
        serviceTypeIdentifierLabel.setText(uiKeys.getString("ServiceStatusHistoryPage.serviceTypeIdentifierLabel.text")); // NOI18N

        serviceName.setName("serviceName"); // NOI18N

        serviceNameLabel.setLabelFor(serviceName);
        serviceNameLabel.setText(uiKeys.getString("ServiceStatusHistoryPage.serviceNameLabel.text")); // NOI18N

        digitalIdLabel.setLabelFor(certificateProperty);
        digitalIdLabel.setText(uiKeys.getString("ServiceStatusHistoryPage.digitalIdLabel.text")); // NOI18N

        servicePreviousStatus.setEditable(!Configuration.getInstance().isEuMode());
        servicePreviousStatus.setModel(servicePreviousStatusModel);
        servicePreviousStatus.setName("servicePreviousStatus"); // NOI18N

        servicePreviousStatusLabel.setLabelFor(servicePreviousStatus);
        servicePreviousStatusLabel.setText(uiKeys.getString("ServiceStatusHistoryPage.servicePreviousStatusLabel.text")); // NOI18N

        previousStatusStartingDateLabel.setLabelFor(previousStatusStartingDate);
        previousStatusStartingDateLabel.setText(uiKeys.getString("ServiceStatusHistoryPage.previousStatusStartingDateLabel.text")); // NOI18N

        previousStatusStartingDate.setName("previousStatusStartingDate"); // NOI18N

        serviceTypeIdentifier.setEditable(!Configuration.getInstance().isEuMode());
        serviceTypeIdentifier.setModel(serviceTypeIdentifierModel);
        serviceTypeIdentifier.setName("serviceTypeIdentifier"); // NOI18N

        javax.swing.GroupLayout historyTitleLayout = new javax.swing.GroupLayout(historyTitle);
        historyTitle.setLayout(historyTitleLayout);
        historyTitleLayout.setHorizontalGroup(
            historyTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historyTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serviceTypeIdentifierLabel)
                    .addComponent(serviceNameLabel)
                    .addComponent(previousStatusStartingDateLabel)
                    .addComponent(servicePreviousStatusLabel)
                    .addComponent(digitalIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(historyTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(historyTitleLayout.createSequentialGroup()
                          .addComponent(serviceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.PREFERRED_SIZE).addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(servicePreviousStatus, 0, 364, Short.MAX_VALUE)
                    .addComponent(previousStatusStartingDate, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                    .addComponent(certificateProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 364, Short.MAX_VALUE)
                    .addComponent(serviceTypeIdentifier, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        historyTitleLayout.setVerticalGroup(
            historyTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyTitleLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(historyTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(historyTitleLayout.createSequentialGroup()
                        .addGroup(historyTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                              .addComponent(serviceTypeIdentifierLabel)
                              .addComponent(serviceTypeIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE,
                                    javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(serviceNameLabel))
                    .addComponent(serviceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                          javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(historyTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(digitalIdLabel)
                    .addComponent(certificateProperty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(historyTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(servicePreviousStatusLabel)
                    .addComponent(servicePreviousStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(historyTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(previousStatusStartingDateLabel)
                    .addComponent(previousStatusStartingDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private eu.europa.ec.markt.tlmanager.view.certificate.CertificateProperty certificateProperty;
    private javax.swing.JLabel digitalIdLabel;
    private eu.europa.ec.markt.tlmanager.view.common.TitledPanel historyTitle;
    private eu.europa.ec.markt.tlmanager.view.common.DateTimePicker previousStatusStartingDate;
    private javax.swing.JLabel previousStatusStartingDateLabel;
    private eu.europa.ec.markt.tlmanager.view.multivalue.MultivalueButton serviceName;
    private javax.swing.JLabel serviceNameLabel;
    private javax.swing.JComboBox servicePreviousStatus;
    private javax.swing.JLabel servicePreviousStatusLabel;
    private javax.swing.JComboBox serviceTypeIdentifier;
    private javax.swing.JLabel serviceTypeIdentifierLabel;
    // End of variables declaration//GEN-END:variables
    /*
     * (non-Javadoc)
     * 
     * @see javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event.TreeSelectionEvent)
     */

    private void initBinding() {
        if (bindingManager == null) {
            bindingManager = new BindingManager(this);
        }

        bindingManager.createBindingForComponent(serviceTypeIdentifier, "serviceTypeIdentifier",
                QNames._ServiceTypeIdentifier_QNAME.getLocalPart());

        bindingManager.createBindingForComponent(serviceName.getMultivaluePanel(), "serviceName",
                QNames._ServiceName);
        bindingManager.appendConverter(new InternationalNamesConverter(), QNames._ServiceName);

        bindingManager.createBindingForComponent(certificateProperty, "sdiWrapperTemp",
                QNames._ServiceDigitalIdentity_QNAME.getLocalPart());
        bindingManager.appendConverter(new CertificatePropertyConverter(),
                QNames._ServiceDigitalIdentity_QNAME.getLocalPart());

        bindingManager.createBindingForComponent(servicePreviousStatus, "serviceStatus",
                QNames._ServiceStatus_QNAME.getLocalPart());

        bindingManager.createBindingForComponent(previousStatusStartingDate, "statusStartingTime",
                QNames._StatusStartingTime);
        bindingManager.appendConverter(new XMLGregorianCalendarConverter(), QNames._StatusStartingTime);
    }

    private SDIWrapper sdiWrapperTemp;  // this will be accessed via binding
    
    /**
     * @return the sdiWrapperTemp
     */
    public SDIWrapper getSdiWrapperTemp() {
        return sdiWrapperTemp;
    }

    /**
     * @param sdiWrapperTemp the sdiWrapperTemp to set
     */
    public void setSdiWrapperTemp(SDIWrapper sdiWrapperTemp) {
        this.sdiWrapperTemp = sdiWrapperTemp;
    }

    /** {@inheritDoc} */
    @Override
    public void updateViewFromData(TSLDataNode dataNode) {
        this.dataNode = dataNode;
        ServiceHistoryInstanceType serviceHistoryInstance = (ServiceHistoryInstanceType) dataNode.getUserObject();
        LOG.log(Level.FINE, "Value changed {0}", serviceHistoryInstance);

        // access service sdi and history sdi and store both temporarily in this (to be accessible via binding)
        HistoryNode historyNode = (HistoryNode) dataNode;
        ServiceNode serviceNode = (ServiceNode) historyNode.getParent();
        TSPServiceType service = serviceNode.getUserObject();
        DigitalIdentityListType serviceSDI = service.getServiceInformation().getServiceDigitalIdentity();
        DigitalIdentityListType historySDI = serviceHistoryInstance.getServiceDigitalIdentity();
        SDIWrapper sdiWrapper = new SDIWrapper(serviceSDI, historySDI);
        setSdiWrapperTemp(sdiWrapper);
        
        bindingManager.unbindAll();

        bindingManager.amendSourceForBinding(this, QNames._ServiceDigitalIdentity_QNAME.getLocalPart());

        bindingManager.amendSourceForBinding(serviceHistoryInstance,
                QNames._ServiceTypeIdentifier_QNAME.getLocalPart());

        bindingManager.amendSourceForBinding(serviceHistoryInstance, QNames._ServiceName);

        bindingManager.amendSourceForBinding(serviceHistoryInstance, QNames._ServiceStatus_QNAME.getLocalPart());

        bindingManager.amendSourceForBinding(serviceHistoryInstance, QNames._StatusStartingTime);

        bindingManager.bindAll();

        // update all the preview information on the multivalue buttons
        serviceName.refreshContentInformation();
    }
}