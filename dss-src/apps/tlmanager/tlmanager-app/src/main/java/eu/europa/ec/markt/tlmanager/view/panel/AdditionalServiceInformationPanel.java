/*
 * DSS - Digital Signature Services
 *
 * Copyright (C) 2011 European Commission, Directorate-General Internal Market and Services (DG MARKT), B-1049 Bruxelles/Brussel
 *
 * Developed by: 2011 ARHS Developments S.A. (rue Nicolas Bov√© 2B, L-1253 Luxembourg) http://www.arhs-developments.com
 *
 * This file is part of the "DSS - Digital Signature Services" project.
 *
 * "DSS - Digital Signature Services" is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * DSS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * "DSS - Digital Signature Services".  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.europa.ec.markt.tlmanager.view.panel;

import eu.europa.ec.markt.tlmanager.core.Configuration;
import eu.europa.ec.markt.tlmanager.util.Util;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ResourceBundle;

import javax.swing.DefaultComboBoxModel;

/**
 * A small panel for holding the values for a <tsl:AdditionalServiceInformationType>.
 * 
 *
 * @version $Revision: 2523 $ - $Date: 2013-09-13 15:21:28 +0200 (ven., 13 sept. 2013) $
 */

public class AdditionalServiceInformationPanel extends javax.swing.JPanel {
    private static final ResourceBundle uiKeys = ResourceBundle.getBundle(
            "eu/europa/ec/markt/tlmanager/uiKeysComponents", Configuration.getInstance().getLocale());

    private AdditionalServiceInformationModel model;
    private DefaultComboBoxModel additionalInformationURIModel;

    /**
     * The default constructor for AdditionalServiceInformationPanel.
     */
    public AdditionalServiceInformationPanel() {
        String[] additionalInformationURI = Util.addNoSelectionEntry(Configuration.getInstance().getTL()
                .getTslAdditionalServiceInformationURI());
        additionalInformationURIModel = new DefaultComboBoxModel(additionalInformationURI);

        model = new AdditionalServiceInformationModel();
        initComponents();
        addListeners();
    }

    private void addListeners() {
        critical.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                model.setCritical(critical.isSelected());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        critical = new javax.swing.JCheckBox();
        serviceInformationClassificationLabel = new javax.swing.JLabel();
        additionalInformationURILabel = new javax.swing.JLabel();
        serviceInformationClassification = new javax.swing.JTextField();
        additionalInformationURI = new javax.swing.JComboBox();

        critical.setText(uiKeys.getString("AdditionalServiceInformationPanel.critical")); // NOI18N

        serviceInformationClassificationLabel.setText(uiKeys.getString("AdditionalServiceInformationPanel.classification")); // NOI18N

        additionalInformationURILabel.setText(uiKeys.getString("AdditionalServiceInformationPanel.uri")); // NOI18N

        additionalInformationURI.setEditable(true);
        additionalInformationURI.setModel(additionalInformationURIModel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(critical)
                    .addComponent(additionalInformationURILabel)
                    .addComponent(serviceInformationClassificationLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(additionalInformationURI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serviceInformationClassification, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(critical)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(additionalInformationURILabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(additionalInformationURI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(serviceInformationClassificationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serviceInformationClassification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox additionalInformationURI;
    private javax.swing.JLabel additionalInformationURILabel;
    private javax.swing.JCheckBox critical;
    private javax.swing.JTextField serviceInformationClassification;
    private javax.swing.JLabel serviceInformationClassificationLabel;
    // End of variables declaration//GEN-END:variables

    private void resetValuesFromModel() {
        critical.setSelected(model.isCritical());
        additionalInformationURI.setSelectedItem(model.getAdditionalInformationURI());
        serviceInformationClassification.setText(model.getServiceInformationClassification());
    }

    private void resetModelFromValues() {
        model.setCritical(critical.isSelected());
        model.setAdditionalInformationURI((String) additionalInformationURI.getSelectedItem());
        model.setServiceInformationClassification(serviceInformationClassification.getText());
    }

    /**
     * Empties all values in the model and resets ui components.
     */
    public void clearModel() {
        this.model.clear();
        resetValuesFromModel();
    }

    /**
     * Resets the component values to the one in the model.
     * 
     * @param model the updated model
     */
    public void updateCurrentValues(AdditionalServiceInformationModel model) {
        this.model = model;
        resetValuesFromModel();
    }

    /**
     * Resets the current values in the model and returns it.
     * 
     * @return the most current model
     */
    public AdditionalServiceInformationModel retrieveCurrentValues() {
        resetModelFromValues();
        return new AdditionalServiceInformationModel(model);
    }
}